<?php namespace Ollyxar\AntiMalware;

/**
 * Class Scanner
 *
 * @package Ollyxar\AntiMalware
 */
class Scanner
{
    /**
     * Self title
     */
    const title = 'PHP malware scanner';

    /**
     * Total files scanned
     *
     * @var int
     */
    private $scannedTotal = 0;

    /**
     * Total suspicions
     *
     * @var int
     */
    private $suspiciousTotal = 0;

    /**
     * Recursive directory scan
     *
     * @param string $dir
     * @param callable $callback
     * @return void
     */
    protected function getFiles($dir, $callback)
    {
        if (is_dir($dir)) {
            $files = scandir($dir);

            foreach ($files as $file) {
                if ($file != "." && $file != "..") {
                    if (is_dir($dir . "/" . $file)) {
                        $this->getFiles($dir . "/" . $file, $callback);
                    } else {
                        $callback($dir . "/" . $file);
                    }
                }
            }
        }
    }

    /**
     * Scan certain file for vulnerabilities
     *
     * @param $file
     * @param bool $report
     * @return array
     */
    protected function scanFile($file, $report = true)
    {
        $handle = fopen($file, "r");
        $isPHP = false;
        $line = 0;
        $detected = false;
        $suspicion = [];

        if ($handle) {
            while (!feof($handle)) {
                $line++;
                $buffer = fgets($handle, 4096);

                if (!$isPHP && preg_match(Patterns::isPHP, $buffer)) {
                    $isPHP = true;
                    $this->scannedTotal++;
                }

                if ($isPHP) {
                    foreach (Patterns::$suspicious as $group => $suspect) {
                        if ($isPHP && preg_match_all($suspect, $buffer, $matches)) {
                            if (!$detected) {
                                $this->suspiciousTotal++;
                                $detected = true;
                            }

                            $suspicion[] = [
                                'group'  => $group,
                                'line'   => $line,
                                'buffer' => $buffer,
                                'danger' => $matches[0][0]
                            ];
                        }
                    }
                }
            }

            fclose($handle);

            if ($report && !empty($suspicion)) {
                Report::suspect($file, $suspicion);
            }
        }

        return $suspicion;
    }

    /**
     * Scanner constructor.
     *
     * @param string $dir
     * @param array $extensions
     */
    public function __construct($dir = __DIR__, $extensions = [])
    {
        Settings::$dir = $dir;

        if (!empty($extensions)) {
            Settings::$extensions = $extensions;
        }

        if (php_sapi_name() !== 'cli') {
            Settings::$mode = Mode::WEB;
        } elseif (function_exists('posix_isatty') && @posix_isatty(STDOUT)) {
            Settings::$mode = Mode::CONSOLE;
        } else {
            Settings::$mode = Mode::CRON;
        }
    }

    /**
     * Application start
     *
     * @return void
     */
    public function run()
    {
        error_reporting(E_ALL);
        set_time_limit(0);

        Report::header();

        $this->getFiles(Settings::$dir, function ($file) {
            if (is_file($file) && filesize($file) <= Settings::$fileSizeMax && in_array(pathinfo($file, PATHINFO_EXTENSION), Settings::$extensions)) {
                $this->scanFile($file);
            }
        });

        Report::footer($this->scannedTotal, $this->suspiciousTotal);
    }
}